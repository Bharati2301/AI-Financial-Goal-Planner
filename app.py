import os
os.environ["STREAMLIT_WATCHER_TYPE"] = "none"

import streamlit as st
from rag_utils import get_relevant_strategies
from llama_utils import generate_savings_plan
from banking import fetch_transactions
import re


st.set_page_config(
    page_title="AI Financial Goal Planner",
    layout="centered",
    page_icon="💰"
)

# -------------------------------
# Sidebar
# -------------------------------
with st.sidebar:
    st.markdown("## 💡 How This App Works")
    st.markdown("""
This app creates a **personalized savings plan** using:

### 🔍 Strategy Matching (ChromaDB + AI)
We match your goal with 500+ expert strategies using smart search.

### 💳 Real Spending Data (Yodlee)
We simulate your bank data to find real savings opportunities.

### 🧠 AI-Generated Plan
A powerful language model builds a custom savings roadmap.
""")
    st.markdown("---")
    st.caption("📦 Powered by: Langchain, ChromaDB, Yodlee, Hugging Face")

# -------------------------------
# Main UI
# -------------------------------
st.title("🏆 AI Financial Goal Planner")

income = st.number_input("💵 Monthly Income ($)", value=5000)
expenses = st.number_input("💸 Monthly Expenses ($)", value=3500)
goal = st.text_input("🎯 Your Goal (e.g., Save for a house)")
timeline = st.slider("⏳ Goal Timeline (months)", 6, 60, 24)

# -------------------------------
# Generate Plan
# -------------------------------
if st.button("🚀 Generate Plan"):
    st.markdown("### ⚙️ Step 2: AI is Working on Your Plan...")

    user_data = {
        "income": income,
        "expenses": expenses,
        "goal": goal,
        "timeline": timeline
    }

    with st.spinner("🔍 Finding relevant strategies..."):
        try:
            strategies = get_relevant_strategies(goal)
        except Exception:
            st.error("Could not fetch strategies. Please try again.")
            st.stop()

    with st.spinner("💳 Analyzing your spending (Yodlee)..."):
        try:
            transactions = fetch_transactions(income, expenses)
        except Exception:
            transactions = {
                "categories": {
                    "food": 800,
                    "shopping": 420,
                    "subscriptions": 300,
                    "housing": 1600,
                    "utilities": 250
                },
                "total_spent": 3370,
                "balance": 1630
            }

        st.markdown("### 📊 Spending Summary:")
        for cat, val in transactions.get("categories", {}).items():
            st.markdown(f"- **{cat.title()}**: ${val}")
        st.markdown(f"**Total Spent**: ${transactions.get('total_spent', 'N/A')}")
        st.markdown(f"**Balance**: ${transactions.get('balance', 'N/A')}")

    with st.spinner("🧠 Generating your savings plan..."):
        plan = generate_savings_plan(user_data, strategies)

    # -------------------------------
    # Step 3: Display Clean Output
    # -------------------------------
    st.markdown("### ✅ Step 3: Your Savings Plan")

    if "error" in plan.lower() or "<html>" in plan.lower():
        st.error("❌ AI failed to generate a valid plan.")
        st.text(plan)
    else:
        plan = re.sub(
            r"expenses are\s+\d+[^a-zA-Z0-9]+.*?income.*?\d+",
            f"expenses are ${expenses}, and your monthly income is ${income}",
            plan,
            flags=re.IGNORECASE,
        )

        plan_lines = plan.strip().split("\n")
        collecting_steps = False
        final_notes = []

        for line in plan_lines:
            line = line.strip()
            if not line:
                continue
            if "savings plan" in line.lower():
                collecting_steps = True
                continue
            if collecting_steps:
                if line.lower().startswith("remember") or line.lower().startswith("note"):
                    final_notes.append(line)
                    continue

                if ':' in line and (line[0].isdigit() or line.startswith("-")):
                    step = line.split(":", 1)
                    header = step[0].split('.', 1)[-1].strip(" -")
                    body = step[1].strip()
                    st.markdown(f"- _**{header}**_: {body}")
                else:
                    st.markdown(f"  {line}")

        if final_notes:
            st.markdown("\n" + "\n".join(final_notes))

        st.markdown("---")
        st.caption("🧠 Plan generated by AI. Use it as a helpful guide.")
